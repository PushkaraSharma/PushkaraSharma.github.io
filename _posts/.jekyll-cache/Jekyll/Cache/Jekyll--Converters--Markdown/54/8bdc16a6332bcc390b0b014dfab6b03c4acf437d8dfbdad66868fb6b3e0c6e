I"y.<h1 id="building-and-pushing-a-docker-image-of-a-deep-learning-flask-api-in-the-safest-way-possible">Building and Pushing a Docker Image of a Deep Learning Flask API in the Safest way possible.</h1>

<blockquote>
  <h2 id="in-this-article-we-will-not-discuss-developing-machine-learning-model-but-rather-containerizing-our-ready-to-deploy-ml-api-flask-with-the-help-of-docker-so-that-there-is-no-hassle-that-our-model-is-not-working-in-the-production-environment-or-while-deploying-it-on-cloud-or-simply-sharing-the-working-model-to-friends-and-colleagues"><strong>In this article, we will not discuss developing Machine Learning model but rather containerizing our ready to deploy **ML API (Flask) with the help of **Docker</strong> so that there is no hassle that our model is not working in the production environment or while deploying it on cloud or simply sharing the working model to friends and colleagues.</h2>
</blockquote>

<p><strong>Note</strong>:- Docker is kind of useful as well as in trend nowadays so better start containerizing your models.</p>

<p>Firstly, I assume that if you are reading this article you may be already familiar with the Docker. If not, donâ€™t worry Iâ€™m still going to define that in my own laymanâ€™s terms ðŸ˜„.</p>

<h2 id="so-what-is-docker">So, What is Docker?</h2>

<p><strong>Docker</strong> is the tool that allows us to set up the whole OS-level virtualization to develop and share the project in packages known as <strong>Docker Images</strong>. Then either these images are shared manually(difficult way) or simply push these images on to the DockerHub and pull whenever required.</p>

<p>When these images run on the systems than they are known as <strong>Docker containers</strong>. So, the <strong>container</strong> is a running instance of the Docker **image. **In more laymanâ€™s terms, images are considered as classes and containers as objects.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ol>
  <li>I assume that you have already installed Docker in your systems. If not simply follow their <a href="https://docs.docker.com/get-docker/"><strong>official documentation</strong></a> to do so.</li>
  <li>Already developed your Deep Learning or Machine Learning Flask API that is ready for deployment. If not yet, then you can try the one that I have used in this tutorial.</li>
  <li>Stable and fast Internet connection. This seems obvious, but trust me, if the internet is not stable you will get a lot of <strong>Error response from the daemon.</strong></li>
</ol>

<h2 id="lets-jump-to-task">Letâ€™s Jump to Task</h2>

<p>The following code snippets show my Deep Learning Flask API that produces an abstractive summary of the provided input. I have used <strong>Torch</strong> and <strong>Transformers</strong> libraries for the same. The sole purpose to choose this model as an example is to use famous libraries of Deep Learning that may create some problems while making an image(Tensorflow and Keras can also be easily installed). Use <code class="language-plaintext highlighter-rouge">pip install package_name</code>to install the required packages.</p>

<p>Now, before writing commands for the Docker image, we have to create a <code class="language-plaintext highlighter-rouge">requirements.txt</code> file to install all required packages in our image. This file can be generated with <code class="language-plaintext highlighter-rouge">pip freeze</code>, and those dependencies can then be installed with <code class="language-plaintext highlighter-rouge">pip install -r requirements.txt</code>.But in some special cases like <code class="language-plaintext highlighter-rouge">torch</code> we have to give a link for downloading that package. In our case, it looked like as follows:-</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">Flask</span><span class="o">==</span>1.1.1
<span class="nv">transformers</span><span class="o">==</span>2.11.0
<span class="nt">--find-links</span> https://download.pytorch.org/whl/torch_stable.html
<span class="nv">torch</span><span class="o">==</span>1.5.1
</code></pre></div></div>

<p>For making the docker image of our project, we first have to choose a base image, most of the articles that I follow used <strong>alpine</strong> for this because it is light-weight but that seems to cause a problem in python and pip installation in my case, thatâ€™s why I choose <strong>ubuntu</strong>(more trusted and comfortable with).</p>

<p>This file should be named as <strong>Dockerfile.txt **and should be present in the root directory of your project. **FROM</strong> command will pull the base image that acts as <strong>OS</strong> for our image. The next command <strong>COPY</strong> will copy all data to the folder named app. <strong>RUN</strong> is used to run any command in our docker image. Here we have updated and upgraded our ubuntu and installed <code class="language-plaintext highlighter-rouge">python 3</code> and <code class="language-plaintext highlighter-rouge">pip3</code> to install python packages. Then we have used <strong>RUN</strong> command to install all dependencies present in <code class="language-plaintext highlighter-rouge">requirements.txt</code> (Note:- Here I have used <code class="language-plaintext highlighter-rouge">default-timeout=100</code> in order to avoid waiting for connection type of error). Then we have used <strong>WORKDIR</strong> to set our working directory that is the<code class="language-plaintext highlighter-rouge">app</code> folder and we have used <strong>EXPOSE **to informs **Docker</strong> that the container listens on the port 5000 at runtime. And Finally, to run our program file i.e. <code class="language-plaintext highlighter-rouge">flask_api.py</code> automatically whenever the image is initialized we have used <strong>CMD</strong> that runs default executables.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM ubuntu:18.04
COPY <span class="nb">.</span> /app
RUN apt update <span class="o">&amp;&amp;</span> apt upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt <span class="nb">install</span> <span class="nt">-y</span> python3 python3-pip  
RUN pip3 <span class="nt">--no-cache-dir</span> <span class="nb">install</span> <span class="nt">--default-timeout</span><span class="o">=</span>100 <span class="nt">-r</span> /app/requirements.txt
WORKDIR /app
EXPOSE 5000
CMD python3 /app/flask_api.py
</code></pre></div></div>

<p>Now, just run the command given below to start building your Docker Image. Here, <code class="language-plaintext highlighter-rouge">deep_learning_api</code> is the name of the image, and <strong>1.0</strong> is the tag. Also, remember to copy that dot(.) in the end. ðŸ˜†</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker build <span class="nt">-t</span> deep_learning_api:1.0 <span class="nb">.</span>
</code></pre></div></div>

<p>After running this command, relax and see the whole process. If you encounter any network-related error at any stage, just simply <strong>restart</strong> the whole process. I have attached some of the screenshots of the process for your references.</p>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_2.png" alt="" /></p>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_4.png" alt="" /></p>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_3.png" alt="" /></p>

<p>Your Docker Image is successfully built. But is it working correctly? Letâ€™s find out. Run the following command to get an  image id. Copy the <strong>image id **of your recently built image</strong>. <strong>In my case it is **574f233e0957.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker images
</code></pre></div></div>

<p>Now to run our Docker container use the following command. If it is working correctly, you will get something like what is shown in the screenshot below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run 574f233e0957
</code></pre></div></div>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_5.png" alt="" /></p>

<p>But, if you click on this address nothing will appear. Thatâ€™s because the IP address of the container is different. So we have to extract that. Open another terminal, and use this command to get the ID of the running container. Copy the <strong>Container ID</strong>. (Mine was 7c2a2d25bb9d)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker container <span class="nb">ls</span> <span class="nt">-la</span>
</code></pre></div></div>

<p>Now, by running the following command you will get a lot of information about your container, but we are interested in <strong>IPAddress</strong>. Search for the same and use this instead of <strong>0.0.0.0</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker inspect 7c2a2d25bb9d
</code></pre></div></div>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_6.png" alt="" /></p>

<p><strong>Finally</strong>, you will see the results in your browser.</p>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_7.png" alt="" /></p>

<p><img src="/home/pushkara/Desktop/portfolio/PushkaraSharma.github.io/assets/img/post8_8.png" alt="" /></p>

<p><strong>OK</strong>, so we have built it. But how to share it?</p>

<p>The answer is <a href="https://hub.docker.com/"><strong>DockerHub</strong></a>. If you havenâ€™t created your account, create one because it will be very beneficial while working with Docker. After creating the account, create a new Repository. I named it <code class="language-plaintext highlighter-rouge">deep_learning_flask_api_demo</code> . Then use <code class="language-plaintext highlighter-rouge">sudo docker login</code> on the command line to log in to your docker account.</p>

<p>Then check your Image ID as described before and tag your image with the following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker tag 574f233e0957 yourDockerHubUserName/RepoName:1.0
</code></pre></div></div>

<p>After tagging simply push it on the DockerHub with the following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker push yourDockerHubUserName/RepoName
</code></pre></div></div>

<p>From now onwards, you can simply pull your docker image with <code class="language-plaintext highlighter-rouge">pull</code>command.</p>

<p><strong>Note:-</strong> Your repo is public by default and as an unpaid user you get only one private repo.</p>

<p>Hopefully, you have successfully built a Docker image of your Deep Learning Flask API. If you still encounter any kind of error, feel free to contact me. I will be more than happy to help anyone. ðŸ˜ƒ</p>

<p>The source code is available on <a href="https://github.com/PushkaraSharma/medium_articles_code/tree/master/Containerize_Deep_Learning_Docker"><strong>GitHub</strong></a>.</p>

<p>Link to my <a href="https://hub.docker.com/r/pushkarasharma11/deep_learning_flask_api_demo"><strong>Docker Image</strong></a>.</p>

<p>Thank you for your precious time.ðŸ˜ŠAnd I hope you like this tutorial.</p>
:ET